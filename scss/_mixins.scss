// Responsive Breakpoints
$breakpoints: (
  "phone": 375px,
  "tablet": 768px,
  "laptop": 1024px,
  "desktop": 1280px,
) !default;

@mixin res($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }
}

// Font-Family
@mixin font($name, $size: null, $weight: null, $color: null) {
  font-family: $name;
  @if $size {
    font-size: $size;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $color {
    color: $color;
  }
}

// Background Elements
@mixin bg($image, $size, $position: null) {
  background-image: url($image);
  background-repeat: no-repeat;
  background-size: $size;
  background-position: $position;
}

// Pseudo Elements
@mixin pseudo($width, $height) {
  content: "";
  display: block;
  position: absolute;
  width: $width;
  height: $height;
}

// Flexbox
@mixin flex($params: null) {
  display: flex;
  $justify-content: null;
  $align-items: null;
  @each $value in $params {
    @if $value == "wrap" {
      flex-wrap: wrap;
    } @else if $value == "row" {
      flex-direction: row;
    } @else if $value == "column" {
      flex-direction: column;
    } @else if index(space-between space-around, $value) {
      $justify-content: $value;
    } @else if index(baseline stretch, $value) {
      $align-items: $value;
    } @else if index(flex-start center flex-end, $value) {
      @if $justify-content {
        $align-items: $value;
      } @else {
        $justify-content: $value;
        @if not $align-items {
          $align-items: $value;
        }
      }
    }
  }
  justify-content: $justify-content;
  align-items: $align-items;
}
